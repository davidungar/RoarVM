#!/bin/bash

echo_usage () {
    echo "Usage: $0 [options]"
    echo
    echo "Creates a configured Makefile"
    echo
    echo "Basic configuration values:"
    echo "    --use-tilera        Enable usage of Tilera libraries"
    echo "    --opt-workaround    Reduce optimization level for problematic files"
    echo
    echo "    --debug"
    echo "    --enforce-opt       Should be used together with --debug to enforce full optimization"
    echo "    --enable-native-opt Enable optimization for current native architecture"
    echo "    --show-cmds         Show the command invocations"
    echo
    echo "Libraries:"
    echo "    --x11-lib <path>    Path to the X11 lib folder"
    echo "    --xext-lib <path>   Path to the X11 extension lib folder"
    echo "    --tile-root <path>  Path to the TILERA infrastructure"
    echo
    echo "Compiler:"
    echo "    --CC <path>"
    echo "    --CXX <path>"
    # return an error code to signal non-success
    exit 128
}

# Retrieve system information and set defaults

OPERATING_SYSTEM=`uname`
USE_TILERA=0
FOR_DISTRIBUTION=1
OPT_WORKAROUND=0
DEBUG=0
ENFORCE_OPT=0
SUPPRESS_CMD_OUTPUT=1
#CC=
#CXX=
CONFIGURE_ARGS="$@"
CONFIG_FLAGS="-m32 -Wextra -Wno-write-strings"
PWD=`pwd`
SRC_DIR=`dirname $PWD`/src
#SYSCTL="/sbin/sysctl"
#if [ ! -e $SYSCTL ] then SYSCTL="/usr$SYSCTL" fi
#number_of_cores=`$SYSCTL `

while [ $# -gt 0 ]
do
  case $1 in
    --enable-native-opt)
      FOR_DISTRIBUTION=0
      shift 1
    ;;
    --use-tilera)
      USE_TILERA=1
      shift 1
    ;;
    --opt-workaround)
      OPT_WORKAROUND=1
      shift 1
    ;;
    --debug)
      DEBUG=1
      shift 1
    ;;
    --enforce-opt)
      ENFORCE_OPT=1
      shift 1
    ;;
    --show-cmds)
      SUPPRESS_CMD_OUTPUT=0
      shift 1
    ;;
    --x11-lib)
      X11_PATH=$2
      shift 2
    ;;
    --xext-lib)
      Xext_PATH=$2
      shift 2
    ;;
    --CC)
      CC=$2
      shift 2
    ;;
    --CXX)
      CXX=$2
      shift 2
    ;;
    -h | --help | *)
      echo_usage
      shift 1
    ;;
  esac
done

if [ $OPT_WORKAROUND -eq 0 ]
then
	LOW_OPTIMIZE_LEVEL=-O3
	HIGH_OPTIMIZE_LEVEL=-O3
else
	LOW_OPTIMIZE_LEVEL=-O1
	HIGH_OPTIMIZE_LEVEL=-O3
	CONFIG_FLAGS="$CONFIG_FLAGS -DCHECK_FOR_PROBLEMATIC_COMPILER=0"
fi

if [ $DEBUG -eq 0 ]
then
    CONFIG_FLAGS="$CONFIG_FLAGS"
else
    CONFIG_FLAGS="$CONFIG_FLAGS -g3 -Dcheck_assertions=1 -Dcheck_many_assertions=1 -DTrace_Execution=0"
	if [ $ENFORCE_OPT -eq 0 ]
    then
	    LOW_OPTIMIZE_LEVEL=-O0
	    HIGH_OPTIMIZE_LEVEL=-O0
    fi
fi

if [ $USE_TILERA -eq 0 ]
then
  case $OPERATING_SYSTEM in
    Darwin)
        LDFLAGS="$LDFLAGS -lX11 -lXext -framework CoreFoundation -lGL -framework CoreServices -framework IOKit"
        X11_PATH="/Developer/SDKs/MacOSX10.6.sdk/usr/X11R6/lib"
        Xext_PATH="/Developer/SDKs/MacOSX10.6.sdk/usr/X11R6/lib"
		if [ -z "$CXX" ]
		then
        	CC=gcc-4.2
        	CXX=g++-4.2
		fi
        CONFIG_FLAGS="$CONFIG_FLAGS -I/Developer/SDKs/MacOSX10.6.sdk/usr/X11/include/"

		# for OSX it might be necessary to use a -D__INTEL_COMPILER
		# Usually some stuff needing CFBundle.h will not compiler otherwise
		# with non-apple compilers
		OUTPUT=`$CXX --version | grep -i apple`
		NONE_APPLE_COMPILE=$?
		if [ $NONE_APPLE_COMPILE -eq 1 ]
		then
			CONFIG_FLAGS="$CONFIG_FLAGS -D__INTEL_COMPILER"
		fi
    ;;
    Linux)
    	LDFLAGS="$LDFLAGS -ldl -lX11 -lXext -lpthread"
        CONFIG_FLAGS="$CONFIG_FLAGS -DOn_Intel_Linux=1 -DHAVE_DLFCN_H=1"

        # WARNING/TODO: currently we enforce native optimization on Linux
        #               this should be removed to be able to provide 
        #               distributable binaries
        FOR_DISTRIBUTION=0
    ;;
  esac
fi

if [ $FOR_DISTRIBUTION -eq 0 ]
then
    CONFIG_FLAGS="$CONFIG_FLAGS -march=native -mtune=native"
fi

echo "# Makefile generated by $0 $CONFIGURE_ARGS" > Makefile

if [ -z "$CXX" ]
then
    if [ $USE_TILERA -eq 1 ]
    then
        CC="\$(BIN)tile-cc"
        CXX="\$(BIN)tile-c++"
		CONFIG_FLAGS="$CONFIG_FLAGS -DTrack_OnStackPointer=0"
        if [[ `tile-cc --version` == "2.1.0.98943"* ]]
        then
          CONFIG_FLAGS="$CONFIG_FLAGS -DUse_CMem=1"
        fi
    else
        CC=gcc
        CXX=g++
    fi
fi

# try some locations to find the X11 libs
if [ -z "$X11_PATH" ]
then
    if [ $USE_TILERA -eq 1 ]
    then
        if [ -f /users/smarr/test/xc/lib/X11/libX11.a ]
        then
            X11_PATH="/users/smarr/test/xc/lib/X11"
            Xext_PATH="/users/smarr/test/xc/lib/Xext"
        else
            if [ -f /home/ungar/renaissance/xfree86/xc/lib/X11/libX11.a ]
            then
                X11_PATH="/home/ungar/renaissance/xfree86/xc/lib/X11"
                Xext_PATH="/home/ungar/renaissance/xfree86/xc/lib/Xext"
            fi
        fi
    else
        if [ -x /usr/lib32 ]
        then
            X11_PATH="/usr/lib32"
            Xext_PATH="/usr/lib32"
        else
            X11_PATH="/usr/lib"
            Xext_PATH="/usr/lib"
        fi
    fi
fi

if [ $USE_TILERA -eq 1 ]
then
    echo "TILERA_ROOT=$TILERA_ROOT"   >> Makefile
    echo "BIN=\$(TILERA_ROOT)/bin/"   >> Makefile
    echo "PLATFORM=Tilera"            >> Makefile
    echo "OS=Linux"                   >> Makefile
    echo "CONFIG_FLAGS = $CONFIG_FLAGS">>Makefile
else
    echo "CONFIG_FLAGS = $CONFIG_FLAGS -DMeasure=0 \
 -DWork_Around_Barrier_Bug=1"         >> Makefile
    echo "PLATFORM=Intel"             >> Makefile
    
    # for now suppress a number of known warnings
    # won't work with the tile-cc
    CONFIG_FLAGS="$CONFIG_FLAGS  -fdiagnostics-show-option -Wno-unused-variable -Wno-unused-value"
fi

echo "CC = $CC"                >> Makefile
echo "CXX= $CXX"               >> Makefile
echo "LDFLAGS=$LDFLAGS"        >> Makefile
echo "X11_PATH=$X11_PATH"      >> Makefile
echo "Xext_PATH=$Xext_PATH"    >> Makefile
echo "SRC_DIR=$SRC_DIR"        >> Makefile
echo "LOW_OPTIMIZE_LEVEL = $LOW_OPTIMIZE_LEVEL"  >> Makefile
echo "HIGH_OPTIMIZE_LEVEL= $HIGH_OPTIMIZE_LEVEL" >> Makefile
echo "SUPPRESS_CMD_OUTPUT= $SUPPRESS_CMD_OUTPUT" >> Makefile

echo "include $SRC_DIR/makefiles/Makefile.common" >> Makefile

# after successful run, preserve this configure call for later reuse
echo "#!/bin/sh
$0 $CONFIGURE_ARGS \"\$@\" &" > config.last
chmod +x config.last
